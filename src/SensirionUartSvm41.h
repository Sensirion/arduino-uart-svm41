/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * SHDLC-Generator: 0.8.2
 * Yaml Version: 0.8.1
 * Template Version: 0.7.0-84-g1150250
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SENSIRIONUARTSVM41_H
#define SENSIRIONUARTSVM41_H

#include <SensirionCore.h>

class SensirionUartSvm41 {

  public:
    SensirionUartSvm41();
    /**
     * begin() - Initializes the SensirionUartSvm41 class.
     *
     * @param serial Arduino stream object to be communicated with.
     *
     */
    void begin(Stream& serial);

    /**
     * startMeasurement() - Starts measurement in polling mode.
     *
     * @note This command is only available in idle mode.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t startMeasurement(void);

    /**
     * stopMeasurement() - Leaves the measurement mode and returns to the idle
     * mode.
     *
     * @note This command is only available in measurement mode.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t stopMeasurement(void);

    /**
     * readMeasuredValuesAsIntegers() - Returns the new measurement results as
     * integers.
     *
     * @note This command is only available in measurement mode. The firmware
     * updates the measurement values every second. Polling data with a faster
     * sampling rate will return the same values. The first measurement is
     * available 1 second after the start measurement command is issued. Any
     * readout prior to this will return zero initialized values.
     *
     * @param humidity Compensated ambient humidity in % RH with a scaling
     * factor of 100.
     *
     * @param temperature Compensated ambient temperature in degrees celsius
     * with a scaling of 200.
     *
     * @param vocIndex VOC index with a scaling value of 10.
     *
     * @param noxIndex NOx index with a scaling value of 10.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t readMeasuredValuesAsIntegers(int16_t& humidity,
                                          int16_t& temperature,
                                          int16_t& vocIndex, int16_t& noxIndex);

    /**
     * readMeasuredValues() - Returns the new measurement results.
     *
     * @note This command is only available in measurement mode. The firmware
     * updates the measurement values every second. Polling data with a faster
     * sampling rate will return the same values. The first measurement is
     * available 1 second after the start measurement command is issued. Any
     * readout prior to this will return zero initialized values.
     *
     * @param humidity Compensated ambient humidity in % RH.
     *
     * @param temperature Compensated ambient temperature in degrees celsius.
     *
     * @param vocIndex VOC index.
     *
     * @param noxIndex NOx index.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t readMeasuredValues(float& humidity, float& temperature,
                                float& vocIndex, float& noxIndex);

    /**
     * readMeasuredRawValues() - Returns the measured raw values.
     *
     * @note This command is only available in measurement mode. The firmware
     * updates the measurement values every second. Polling data with a faster
     * sampling rate will return the same values. The first measurement is
     * available 1 second after the start measurement command is issued. Any
     * readout prior to this will return zero initialized values.
     *
     * @param rawHumidity Uncompensated raw humidity in % RH as read from the
     * SHT40 with a scaling factor of 100.
     *
     * @param rawTemperature Uncompensated raw temperature in degrees celsius as
     * read from the SHT40 with a scaling of 200.
     *
     * @param rawVocTicks Raw VOC output ticks as read from the SGP sensor.
     *
     * @param rawNoxTicks Raw NOx output ticks as read from the SGP sensor.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t readMeasuredRawValues(int16_t& rawHumidity,
                                   int16_t& rawTemperature,
                                   uint16_t& rawVocTicks,
                                   uint16_t& rawNoxTicks);

    /**
     * getTemperatureOffsetForRhtMeasurementsTicks() - Gets the T-Offset for the
     * temperature compensation of the RHT algorithm.
     *
     * @param tOffset Temperature offset which is used for the RHT measurements
     * as an int16 value (2 bytes) in degrees celsius with a scaling of 200.
     *
     * @note Only SVM41 firmware versions >= 2.0 are supported. Please update
     * your SVM41 module if necessary.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getTemperatureOffsetForRhtMeasurementsTicks(int16_t& tOffset);

    /**
     * getTemperatureOffsetForRhtMeasurements() - Gets the T-Offset for the
     * temperature compensation of the RHT algorithm.
     *
     * @param tOffset Temperature offset which is used for the RHT measurements
     * in degrees celsius with no scaling.
     *
     * @note Only supported for firmware version >= 2.0.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getTemperatureOffsetForRhtMeasurements(float& tOffset);

    /**
     * getVocTuningParameters() - Gets the currently set parameters for
     * customizing the VOC algorithm.
     *
     * @param vocIndexOffset VOC index representing typical (average)
     * conditions.
     *
     * @param learningTimeOffsetHours Time constant to estimate the VOC
     * algorithm gain from the history in hours. Past events will be forgotten
     * after about twice the learning time.
     *
     * @param learningTimeGainHours Time constant to estimate the VOC algorithm
     * gain from the history in hours. Past events will be forgotten after about
     * twice the learning time.
     *
     * @param gatingMaxDurationMinutes Maximum duration of gating in minutes
     * (freeze of estimator during high VOC index signal). Set to zero to
     * disable the gating.
     *
     * @param stdInitial Initial estimate for standard deviation. Lower value
     * boosts events during initial learning period, but may result in larger
     * device-to-device variations.
     *
     * @param gainFactor Gain factor to amplify or to attenuate the VOC index
     * output.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getVocTuningParameters(int16_t& vocIndexOffset,
                                    int16_t& learningTimeOffsetHours,
                                    int16_t& learningTimeGainHours,
                                    int16_t& gatingMaxDurationMinutes,
                                    int16_t& stdInitial, int16_t& gainFactor);

    /**
     * getNoxTuningParameters() - Gets the currently set parameters for
     * customizing the NOx algorithm.
     *
     * @param noxIndexOffset VOC index representing typical (average)
     * conditions.
     *
     * @param learningTimeOffsetHours Time constant to estimate the NOx
     * algorithm gain from the history in hours. Past events will be forgotten
     * after about twice the learning time.
     *
     * @param learningTimeGainHours Time constant to estimate the NOx algorithm
     * gain from the history in hours. Past events will be forgotten after about
     * twice the learning time.
     *
     * @param gatingMaxDurationMinutes Maximum duration of gating in minutes
     * (freeze of estimator during high NOx index signal). Set to zero to
     * disable the gating.
     *
     * @param stdInitial Initial estimate for standard deviation. Lower value
     * boosts events during initial learning period, but may result in larger
     * device-to-device variations.
     *
     * @param gainFactor Gain factor to amplify or to attenuate the NOx index
     * output.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getNoxTuningParameters(int16_t& noxIndexOffset,
                                    int16_t& learningTimeOffsetHours,
                                    int16_t& learningTimeGainHours,
                                    int16_t& gatingMaxDurationMinutes,
                                    int16_t& stdInitial, int16_t& gainFactor);

    /**
     * storeNvData() - Stores all algorithm parameters to the non-volatile
     * memory.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t storeNvData(void);

    /**
     * setTemperatureOffsetForRhtMeasurementsTicks() - Sets the T-Offset for the
     * temperature compensation of the RHT algorithm.
     *
     * @note Execute the store command after writing the parameter to store it
     * in the non-volatile memory of the device otherwise the parameter will be
     * reset upton a device reset.
     *
     * @param tOffset Temperature offset which is used for the RHT measurements
     * as an int16 value (2 bytes) in degrees celsius with a scaling of 200.
     *
     * @note Only SVM41 firmware versions >= 2.0 are supported. Please update
     * your SVM41 module if necessary.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t setTemperatureOffsetForRhtMeasurementsTicks(const int16_t tOffset);

    /**
     * setTemperatureOffsetForRhtMeasurements() - Sets the T-Offset for the
     * temperature compensation of the RHT algorithm.
     *
     * @note Execute the store command after writing the parameter to store it
     * in the non-volatile memory of the device otherwise the parameter will be
     * reset upton a device reset.
     *
     * @param tOffset Temperature offset in degrees celsius.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t setTemperatureOffsetForRhtMeasurements(float tOffset);

    /**
     * setVocTuningParameters() - Sets parameters to customize the VOC
     * algorithm. This command is only available in idle mode.
     *
     * @note Execute the store command after writing the parameter to store it
     * in the non-volatile memory of the device otherwise the parameter will be
     * reset upton a device reset.
     *
     * @param vocIndexOffset VOC index representing typical (average)
     * conditions. Allowed values are in range 1..250. The default value is 100.
     *
     * @param learningTimeOffsetHours Time constant to estimate the VOC
     * algorithm offset from the history in hours. Past events will be forgotten
     * after about twice the learning time. Allowed values are in range 1..1000.
     * The default value is 12 hours.
     *
     * @param learningTimeGainHours Time constant to estimate the VOC algorithm
     * gain from the history in hours. Past events will be forgotten after about
     * twice the learning time. Allowed values are in range 1..1000. The default
     * value is 12 hours.
     *
     * @param gatingMaxDurationMinutes Maximum duration of gating in minutes
     * (freeze of estimator during high VOC index signal). Set to zero to
     * disable the gating. Allowed values are in range 0..3000. The default
     * value is 180 minutes.
     *
     * @param stdInitial Initial estimate for standard deviation. Lower value
     * boosts events during initial learning period, but may result in larger
     * device-to-device variations. Allowed values are in range 10..5000. The
     * default value is 50.
     *
     * @param gainFactor Gain factor to amplify or to attenuate the VOC index
     * output. Allowed values are in range 1..1000. The default value is 230.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t setVocTuningParameters(int16_t vocIndexOffset,
                                    int16_t learningTimeOffsetHours,
                                    int16_t learningTimeGainHours,
                                    int16_t gatingMaxDurationMinutes,
                                    int16_t stdInitial, int16_t gainFactor);

    /**
     * setNoxTuningParameters() - Sets parameters to customize the NOx
     * algorithm. This command is only available in idle mode.
     *
     * @note Execute the store command after writing the parameter to store it
     * in the non-volatile memory of the device otherwise the parameter will be
     * reset upton a device reset.
     *
     * @param noxIndexOffset NOx index representing typical (average)
     * conditions. Allowed values are in range 1..250. The default value is 100.
     *
     * @param learningTimeOffsetHours Time constant to estimate the NOx
     * algorithm offset from the history in hours. Past events will be forgotten
     * after about twice the learning time. Allowed values are in range 1..1000.
     * The default value is 12 hours.
     *
     * @param learningTimeGainHours Time constant to estimate the NOx algorithm
     * gain from the history in hours. Past events will be forgotten after about
     * twice the learning time. Allowed values are in range 1..1000. The default
     * value is 12 hours.
     *
     * @param gatingMaxDurationMinutes Maximum duration of gating in minutes
     * (freeze of estimator during high NOx index signal). Set to zero to
     * disable the gating. Allowed values are in range 0..3000. The default
     * value is 180 minutes.
     *
     * @param stdInitial Initial estimate for standard deviation. Lower value
     * boosts events during initial learning period, but may result in larger
     * device-to-device variations. Allowed values are in range 10..5000. The
     * default value is 50.
     *
     * @param gainFactor Gain factor to amplify or to attenuate the NOx index
     * output. Allowed values are in range 1..1000. The default value is 230.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t setNoxTuningParameters(int16_t noxIndexOffset,
                                    int16_t learningTimeOffsetHours,
                                    int16_t learningTimeGainHours,
                                    int16_t gatingMaxDurationMinutes,
                                    int16_t stdInitial, int16_t gainFactor);

    /**
     * getVocState() - Gets the current VOC algorithm state. Retrieved values
     * can be used to set the VOC algorithm state to resume operation after a
     * short interruption, skipping initial learning phase. This command is only
     * available during measurement mode.
     *
     * @note This feature can only be used after at least 3 hours of continuous
     * operation.
     *
     * @param state Current VOC algorithm state.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getVocState(uint8_t state[], uint8_t stateSize);

    /**
     * setVocState() - Set previously retrieved VOC algorithm state to resume
     * operation after a short interruption, skipping initial learning phase.
     * This command is only available in idle mode.
     *
     * @note This feature should not be used after interruptions of more than 10
     * minutes.
     *
     * @param state Current VOC algorithm state.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t setVocState(const uint8_t state[], uint8_t stateSize);

    /**
     * getProductType() - Gets the product type from the device.
     *
     * @param productType String containing the product type.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getProductType(unsigned char productType[],
                            uint8_t productTypeSize);

    /**
     * getProductName() - Gets the product name from the device.
     *
     * @param productName String containing the product name.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getProductName(unsigned char productName[],
                            uint8_t productNameSize);

    /**
     * getSerialNumber() - Gets the serial number from the device.
     *
     * @param serialNumber String containing the serial number.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getSerialNumber(unsigned char serialNumber[],
                             uint8_t serialNumberSize);

    /**
     * getVersion() - Gets the version information for the hardware, firmware
     * and SHDLC protocol.
     *
     * @param firmwareMajor Firmware major version number.
     *
     * @param firmwareMinor Firmware minor version number.
     *
     * @param firmwareDebug Firmware debug state. If the debug state is set, the
     * firmware is in development.
     *
     * @param hardwareMajor Hardware major version number.
     *
     * @param hardwareMinor Hardware minor version number.
     *
     * @param protocolMajor Protocol major version number.
     *
     * @param protocolMinor Protocol minor version number.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getVersion(uint8_t& firmwareMajor, uint8_t& firmwareMinor,
                        bool& firmwareDebug, uint8_t& hardwareMajor,
                        uint8_t& hardwareMinor, uint8_t& protocolMajor,
                        uint8_t& protocolMinor);

    /**
     * deviceReset() - Executs a reset on the device.
     *
     * @note The device will reply before executing the reset. If the command is
     * send with broadcast, the reset is done directly after the reception of
     * the command.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t deviceReset(void);

    /**
     * getSystemUpTime() - Get the system up time of the device.
     *
     * @param systemUpTime The time since the last power-on or device reset in
     * seconds.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t getSystemUpTime(uint32_t& systemUpTime);

  private:
    Stream* _serial = nullptr;
};

#endif /* SENSIRIONUARTSVM41_H */
